version: 2.1
jobs:
  run-tests:
    docker:
      - image: circleci/node:latest
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "package.json" }}
            - dependency-cache-
      - run:
          name: Install Dependencies
          command: . build/install_dependencies.sh
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - node_modules
      - run: 
          name: Login to Org
          command: . build/login_to_sandbox.sh
      - run:
          name: Run Apex Tests
          command: . build/run_apex_tests.sh
      - store_test_results:
          path: test-results
  code-review:
    docker:
      - image: circleci/node:latest
    steps:
      - checkout
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "package.json" }}
            - dependency-cache-
      - run:
          name: Install Dependencies
          command: . build/install_dependencies.sh
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - node_modules
      - run:
          name: SFDX Scanner Analysis
          command: . build/run_sfdx_scanner.sh
      - store_artifacts:
          path: sfdxScannerAnalysis.csv
  deploy-code:
    docker:
      - image: circleci/node:latest
    steps:
      - checkout
      - run:
          name: "Run Commit Message Check Script"
          command: . build/check_commit_message.sh
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "package.json" }}
            - dependency-cache-
      - run:
          name: "Install Dependencies"
          command: . build/install_dependencies.sh  
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - node_modules
      - run: 
          name: Login to Org
          command: . build/login_to_sandbox.sh  
      - run:
          name: Deploy to Org
          command: . build/deploy_code.sh  

workflows:
  version: 2
  master-validate-deploy:
    jobs:
      - run-tests:
          filters:
            branches:
                only:
                  - master   # Only on master branch
      - deploy-code:
          requires:
            - run-tests
          filters:
            branches:
                only:
                  - master   # Only on master branch

  # Workflow for branches that start with 'feature/' or 'bugfix/'
  feature-branch-validate:
    jobs:
      - run-tests:
          filters:
            branches:
              only:
                - /^feature\/.*/   # Any branch starting with 'feature/'
                - /^bugfix\/.*/    # Any branch starting with 'bugfix/'